/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hms;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;


/**
 *
 * @author Samitha
 */
public class Reservation extends javax.swing.JFrame {

    /**
     * Creates new form Reservation
     */
    static Reservation res;
   public  String arrival, depature,uname;
    

    public Reservation(String uname) {
        initComponents();
        //this.setLocationRelativeTo(null);
        this.setTitle("Reservations-Select Dates");
        this.setSize(721, 430);
        this.setLocation(300, 100);
        this.setResizable(false);
        setLayout(new BorderLayout()); // set a new boder layout
        //adding a background image
        JLabel background = new JLabel(new ImageIcon("C:\\Users\\Samitha\\Documents\\NetBeansProjects\\HMS\\src\\images\\res1.jpg"));
        add(background);
        background.setLayout(new FlowLayout());
        this.uname=uname;
        System.out.println("******&&"+uname);
    }

    
    public Reservation() {
        initComponents();
        //this.setLocationRelativeTo(null);
        this.setTitle("Reservations-Select Dates");
        this.setSize(721, 430);
        this.setLocation(300, 100);
        this.setResizable(false);
        setLayout(new BorderLayout()); // set a new boder layout
        //adding a background image
        JLabel background = new JLabel(new ImageIcon("C:\\Users\\Samitha\\Documents\\NetBeansProjects\\HMS\\src\\images\\res1.jpg"));
        add(background);
        background.setLayout(new FlowLayout());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        RoomsAndPrices = new javax.swing.JButton();
        depatureChooser = new datechooser.beans.DateChooserCombo();
        arrivalChooser = new datechooser.beans.DateChooserCombo();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Select Arrival and Depature Dates");

        jLabel2.setBackground(new java.awt.Color(255, 255, 0));
        jLabel2.setText("Choose Arrival Date");

        jLabel3.setBackground(new java.awt.Color(255, 255, 0));
        jLabel3.setText("Choose Depature Date");

        RoomsAndPrices.setText("Rooms and Prices");
        RoomsAndPrices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RoomsAndPricesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(RoomsAndPrices, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(244, 244, 244))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(arrivalChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 149, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(depatureChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(156, 156, 156))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(depatureChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(arrivalChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                .addComponent(RoomsAndPrices)
                .addGap(101, 101, 101))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String getarrivaldate(){

        return this.depature;
}
    
    public String getdeparturedate(){
    
    
    return this.arrival;
    
    }
    
    
    
    private void RoomsAndPricesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RoomsAndPricesActionPerformed
        // TODO add your handling code here:

        
        arrival = arrivalChooser.getText();
        depature = depatureChooser.getText();
      
        int a = 0, b = 0;
        int temp1 = 0, temp2 = 0;
        Integer date=0 ,date1=0,date2= 0;
        //algorithm to finding arrival and depature months
        for (int i = 0; i < arrival.length(); i++) {
            for (int j = 0; j < depature.length(); j++) {
                if (arrival.charAt(i) == '/' && a == 0 && depature.charAt(j) == '/' && b == 0) {
                    a++;
                    b++;
//                    System.out.println(arrival.substring(0, i));
//                    System.out.println(depature.substring(0, j));

                    temp1 = i;
                    temp2 = j;

                }
            }
        }

        int arrivalMonth = Integer.parseInt(arrival.substring(0, temp1));
        int depatureMonth = Integer.parseInt(depature.substring(0, temp2));

        //algorithm to  finding arrival dates
        int firstslash = 0, secondslash = 0;
        int index1 = 0;
        for (int i = 0; i < arrival.length(); i++) {

            if (arrival.charAt(i) == '/') {
                index1++;
                if (index1 == 1) {
                    firstslash = i;
                }
                if (index1 == 2) {
                    secondslash = i;
                }

            }

        }
        int arriveDate = Integer.parseInt(arrival.substring(firstslash + 1, secondslash));
      //  System.out.println(arrival.substring(firstslash + 1, secondslash));
        
        //find the arrive year
        int arrivalyear = Integer.parseInt(arrival.substring(secondslash + 1, arrival.length()));
       // System.out.println(arrival.substring(secondslash + 1, arrival.length()));
        
        
        // algorithm to finding departure dates
        index1 = 0;
        for (int i = 0; i < depature.length(); i++) {

            if (depature.charAt(i) == '/') {
                index1++;
                if (index1 == 1) {
                    firstslash = i;
                }
                if (index1 == 2) {
                    secondslash = i;
                }

            }

        }
int month1=0;
        int departureDate = Integer.parseInt(depature.substring(firstslash + 1, secondslash));
      //  System.out.println(depature.substring(firstslash + 1, secondslash));
        
        // algorithm to  find departure year
        int departureyear = Integer.parseInt(depature.substring(secondslash + 1, depature.length()));
       // System.out.println(depature.substring(secondslash + 1, depature.length()));

        //calculate number of nights
        if (arrivalyear == departureyear && arrivalMonth == depatureMonth) {
            date = departureDate - arriveDate;
           // System.out.println(date);
        }else if(arrivalyear == departureyear&& arrivalMonth != depatureMonth){
            month1 = depatureMonth-arrivalMonth;
            switch(month1){
                case 1: date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1;break;
                case 2: date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1 + noOfDays(arrivalMonth+1, arrivalyear);break;
                case 3: date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1 + noOfDays(arrivalMonth+1, arrivalyear)+noOfDays(arrivalMonth+2, arrivalyear);break;
                case 4: date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1 + noOfDays(arrivalMonth+1, arrivalyear)+noOfDays(arrivalMonth+2, arrivalyear)+ noOfDays(arrivalMonth+3, arrivalyear);break;
                case 5: date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1 + noOfDays(arrivalMonth+1, arrivalyear)+noOfDays(arrivalMonth+2, arrivalyear)+ noOfDays(arrivalMonth+3, arrivalyear)+ noOfDays(arrivalMonth+4, arrivalyear);break;
                case 6: date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1 + noOfDays(arrivalMonth+1, arrivalyear)+noOfDays(arrivalMonth+2, arrivalyear)+ noOfDays(arrivalMonth+3, arrivalyear)+ noOfDays(arrivalMonth+4, arrivalyear)+noOfDays(arrivalMonth+5, arrivalyear);break;
                case 7: date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1 + noOfDays(arrivalMonth+1, arrivalyear)+noOfDays(arrivalMonth+2, arrivalyear)+ noOfDays(arrivalMonth+3, arrivalyear)+ noOfDays(arrivalMonth+4, arrivalyear)+noOfDays(arrivalMonth+5, arrivalyear)+noOfDays(arrivalMonth+6, arrivalyear);break;
                case 8: date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1 + noOfDays(arrivalMonth+1, arrivalyear)+noOfDays(arrivalMonth+2, arrivalyear)+ noOfDays(arrivalMonth+3, arrivalyear)+ noOfDays(arrivalMonth+4, arrivalyear)+noOfDays(arrivalMonth+5, arrivalyear)+noOfDays(arrivalMonth+6, arrivalyear)+noOfDays(arrivalMonth+7, arrivalyear);break;
                case 9: date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1 + noOfDays(arrivalMonth+1, arrivalyear)+noOfDays(arrivalMonth+2, arrivalyear)+ noOfDays(arrivalMonth+3, arrivalyear)+ noOfDays(arrivalMonth+4, arrivalyear)+noOfDays(arrivalMonth+5, arrivalyear)+noOfDays(arrivalMonth+6, arrivalyear)+noOfDays(arrivalMonth+7, arrivalyear)+noOfDays(arrivalMonth+8, arrivalyear);break;
                case 10: date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1 + noOfDays(arrivalMonth+1, arrivalyear)+noOfDays(arrivalMonth+2, arrivalyear)+ noOfDays(arrivalMonth+3, arrivalyear)+ noOfDays(arrivalMonth+4, arrivalyear)+noOfDays(arrivalMonth+5, arrivalyear)+noOfDays(arrivalMonth+6, arrivalyear)+noOfDays(arrivalMonth+7, arrivalyear)+noOfDays(arrivalMonth+8, arrivalyear)+noOfDays(arrivalMonth+9, arrivalyear);break;
                case 11: date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1 + noOfDays(arrivalMonth+1, arrivalyear)+noOfDays(arrivalMonth+2, arrivalyear)+ noOfDays(arrivalMonth+3, arrivalyear)+ noOfDays(arrivalMonth+4, arrivalyear)+noOfDays(arrivalMonth+5, arrivalyear)+noOfDays(arrivalMonth+6, arrivalyear)+noOfDays(arrivalMonth+7, arrivalyear)+noOfDays(arrivalMonth+8, arrivalyear)+noOfDays(arrivalMonth+9, arrivalyear)+noOfDays(arrivalMonth+10, arrivalyear);break;
                 
                    
            }   
        }else if(arrivalyear != departureyear){
                int year1= departureyear-arrivalyear;
                switch(year1){
                    case 1:
                        for(int i=arrivalMonth+1;i<=12;i++){
                            date1+=noOfDays(i, arrivalyear);
                        }
                        for(int i=1;i<depatureMonth;i++){
                            date2+=noOfDays(i, departureyear);
                        }
                        date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1+date1+date2;break;
                    
                    case 2:
                        
                        for(int i=arrivalMonth+1;i<=12;i++){
                            date1+=noOfDays(i, arrivalyear);
                        }
                        for(int i=1;i<depatureMonth;i++){
                            date2+=noOfDays(i, departureyear);
                        }
                       if(arrivalyear+1%4!=0){
                        date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1+date1+date2+365;break;
                       }else{
                        date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1+date1+date2+366;break;
                       }
                     case 3:
                        
                        for(int i=arrivalMonth+1;i<=12;i++){
                            date1+=noOfDays(i, arrivalyear);
                        }
                        for(int i=1;i<depatureMonth;i++){
                            date2+=noOfDays(i, departureyear);
                        }
                     if((arrivalyear+1)%4!=0&&(arrivalyear+2)%4!=0){
                     date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1+date1+date2+365*2;break;
                     }else{
                     date=(noOfDays(arrivalMonth, arrivalyear)-arriveDate)+departureDate-1+date1+date2+365+366;break;
                     }
                     default :  System.out.println("You can't reserve");break;
                }
        }
        
        //convet int to string%
        //total nights
        String nights = date.toString();
        reservation_selectRooms room = new reservation_selectRooms(Integer.parseInt(nights));
        room.setVisible(true);
        try {

            room.text(arrival, depature, nights, uname);

            //room.getRef(res);
        } catch (SQLException ex) {
            Logger.getLogger(Reservation.class.getName()).log(Level.SEVERE, null, ex);
        }

        //System.out.println(noOfDays(2, 15));
                

    }//GEN-LAST:event_RoomsAndPricesActionPerformed

    // method to calculate number of days per month
    public int noOfDays(int month,int year){
      if(year%4!=0){
      
        switch(month){
            
            case 1:return 31;
            case 2:return 28;
            case 3:return 31;
            case 4:return 30;
            case 5:return 31;
            case 6:return 30;
            case 7:return 31;
            case 8:return 31;
            case 9:return 30;
            case 10:return 31;
            case 11:return 30;
            case 12:return 31;
               
        }
      }else if(year%4==0){
            switch(month){
            case 1:return 31;
            case 2:return 29;
            case 3:return 31;
            case 4:return 30;
            case 5:return 31;
            case 6:return 30;
            case 7:return 31;
            case 8:return 31;
            case 9:return 30;
            case 10:return 31;
            case 11:return 30;
            case 12:return 31;
               
        }
      
      }
        return 0;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                res = new Reservation();
                res.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RoomsAndPrices;
    private datechooser.beans.DateChooserCombo arrivalChooser;
    private datechooser.beans.DateChooserCombo depatureChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
